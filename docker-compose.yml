version: '3.9'

services:
  postgres:
    profiles: ["backend", "apply_migrations"]
    image: postgres:15.2-alpine
    restart: always
    user: "70:70"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    ports:
      - "5432:5432"
    networks:
      - backend_network
    container_name: hotel_admin_postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  apply_migrations:
    profiles: ["apply_migrations"]
    build: .
    restart: on-failure
    env_file:
      - .env
    networks:
      - backend_network
    depends_on:
      postgres:
        condition: service_healthy
    container_name: hotel_admin_migrations
    entrypoint: python manage.py migrate

  backend:
    profiles: ["backend"]
    build: .
    restart: always
    env_file:
      - .env
    volumes:
      - static_value:/hotels_admin/static/
    networks:
      - backend_network
    depends_on:
      - postgres
    expose:
      - 8000
    container_name: hotel_admin_backend
    entrypoint: gunicorn hotels_admin_project.wsgi:application --bind 0:8000

  nginx:
    profiles: ["backend"]
    image: nginx:1.25-alpine
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_value:/var/html/static/
    ports:
      - "80:80"
    expose:
      - 80
    networks:
      - backend_network
    depends_on:
      - backend
    container_name: hotel_admin_nginx

networks:
  backend_network: {}

volumes:
  postgres_data: {}
  static_value: {}